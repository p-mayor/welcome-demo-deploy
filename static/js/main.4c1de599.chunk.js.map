{"version":3,"sources":["components/clock/Clock.jsx","components/welcome/Welcome.jsx","components/contact/Contact.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Clock","props","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","className","toLocaleTimeString","React","Component","Welcome","name","Contact","handleChange","event","newformData","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAqCeA,E,kDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAAIC,MAJC,E,gEAQE,IAAD,OAChBC,KAAKC,QAAUC,aACX,kBAAM,EAAKC,SACX,O,6CAKJC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACVP,KAAM,IAAIC,S,+BAKd,OACI,yBAAKO,UAAU,SACX,qCAAWN,KAAKH,MAAMC,KAAKS,qBAA3B,U,GA7BIC,IAAMC,WCUXC,MATf,SAAiBd,GACb,OACI,yBAAKU,UAAU,WAAf,YACcV,EAAMe,KAChB,kBAAC,EAAD,Q,OCgFGC,E,kDApFX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAWViB,aAAe,SAACC,GACZ,IAAMC,EAAW,eAAO,EAAKlB,MAAMmB,UACnCD,EAAYD,EAAMG,OAAON,MAAQG,EAAMG,OAAOC,MAE9C,EAAKb,SAAS,CAAEW,SAAUD,KAhBX,EAmBnBI,aAAe,SAACL,GACZA,EAAMM,iBAEN,EAAKf,SAAS,CACVgB,WAAW,KAvBA,EA2BnBC,UAAY,SAACR,GACT,EAAKT,SAAS,CACVgB,WAAW,EACXL,SAAU,CACNO,UAAW,GACXC,SAAU,OA7BlB,EAAK3B,MAAQ,CACTwB,WAAW,EACXL,SAAU,CACNO,UAAW,GACXC,SAAU,KAPH,E,qDAsCf,OAAIxB,KAAKH,MAAMwB,UAEP,yBAAKf,UAAU,WACX,yCAAeN,KAAKH,MAAMmB,SAASO,UAAnC,8BACA,4BAAQE,QAASzB,KAAKsB,WAAtB,eAMR,yBAAKhB,UAAU,WACX,0BAAMoB,SAAU1B,KAAKmB,cACjB,6BACI,2BAAOQ,QAAQ,aAAf,cACA,2BACIC,KAAK,OACLjB,KAAK,YACLO,MAAOlB,KAAKH,MAAMmB,SAASO,UAC3BM,SAAU7B,KAAKa,gBAIvB,6BACI,2BAAOc,QAAQ,YAAf,aACA,2BACIC,KAAK,OACLjB,KAAK,WACLO,MAAOlB,KAAKH,MAAMmB,SAASQ,SAC3BK,SAAU7B,KAAKa,gBAIvB,+CAEA,6BACKb,KAAKH,MAAMmB,SAASO,UACrB,6BACCvB,KAAKH,MAAMmB,SAASQ,gB,GA5EvBhB,IAAMC,WCYbqB,MATf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAASK,KAAK,UACd,kBAAC,EAAD,QCGcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4c1de599.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            date: new Date()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerId = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Clock\">\r\n                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react'\r\nimport Clock from '../clock/Clock'\r\n\r\nfunction Welcome(props) {\r\n    return (\r\n        <div className=\"Welcome\">\r\n            Welcome, {props.name}\r\n            <Clock />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;","import React from 'react';\r\n\r\nclass Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            submitted: false,\r\n            formData: {\r\n                firstName: '',\r\n                lastName: ''\r\n            }\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const newformData = {...this.state.formData};\r\n        newformData[event.target.name] = event.target.value;\r\n\r\n        this.setState({ formData: newformData });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            submitted: true\r\n        });\r\n    }\r\n\r\n    resetForm = (event) => {\r\n        this.setState({\r\n            submitted: false,\r\n            formData: {\r\n                firstName: '',\r\n                lastName: ''\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.submitted) {\r\n            return (\r\n                <div className=\"Contact\">\r\n                    <p>Thank you, {this.state.formData.firstName}, for submitting the form.</p>\r\n                    <button onClick={this.resetForm}>Reset Form</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"Contact\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={this.state.formData.firstName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={this.state.formData.lastName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <button>Submit Form</button>\r\n\r\n                    <div>\r\n                        {this.state.formData.firstName}\r\n                        <br />\r\n                        {this.state.formData.lastName}\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;","import React from 'react';\nimport './App.css';\nimport Welcome from './components/welcome/Welcome'\nimport Contact from './components/contact/Contact'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Welcome name=\"Peter\" />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}